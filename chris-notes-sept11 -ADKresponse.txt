Lunar notes!
--Overall looking good! Quite impressive how much of this functionality is already pulled together and playable :D
--Disclaimer: I'm not very familiar with the codebase from Alien Caverns, so I'm unsure what image, filename, or code choices are inherited from things done by Zak, Christer, Ezovex or others :) Apology if any feedback here is in reference to stuff which wasn't by you, though could of course potentially still refactor or adjust prior to using for pitch - ADK - None it's just taken following on from end of online course, only possible exception is when I was trying to figure out switching between screen states.
--I wasn't clear on the mechanics or goals of how to play it at first, though this may be known since it's just a prototype at this stage. I had to check the input code to realize the key mappings. Even if the game has an instructions screen for a web game I often find it helpful to add simple key labels in the in-game interface (ex. "People (A/D): 5"). I could trade people to/from but not extract Ore or Fuel, not sure if I was doing those wrong or misunderstanding the mechanics. - ADK - Well yes, it is a prototype, comparing to state of previous pitches this doesn't seem unusual. Thought with keys was to echo the games style of ones I grew up with, but as they were back then thats not very user friendly, could change to more context specific, auto load/unload at resource center / base? 
--While I can see it's likely a carryover from initially just using WASD like arrows, the R/F and T/G and now W/S conventions as +/- is inconsistent with the A/D as a horizontal axis. I'd suggest remapping the A/D to either Q/A or E/D to match the others as up/down. Along the same lines in the definition of the ship's input's parameters I'd suggest sticking to give/take pairings changing this set of arguments:
giveFuel, takePeople, takeFuel, givePeople, giveOxygen, takeOxygen, giveOre, takeOre
To this order:
giveFuel, takeFuel, givePeople, takePeople, giveOxygen, takeOxygen, giveOre, takeOre
ADK- This is going to be ripped out to be just auto load, autodump
--At top of Input.js I'd recommend throwing a comment after each letter key const for what that key constant was added for. Ex.
const KEY_W = 87; // add fuel [...or whichever W does]
This makes it easier to tell later if a defined key constant is still in use or free to be remapped for some other need.
--Filenames should ideally adhere to consistent capitalization scheme, otherwise often leads to errors if (ex.) developing on Windows where file capitalization isn't regarded but then the same code won't work on Mac or Linux (incl. most web hosts). This also applies to the image file named o2rig.png, even though it's correctly matched in the code since it's the only capital letter in any imagen name I'd recommend lowercasing it in both the filename and code for asset naming consistency. - ADK Filenames changed, o2->o2 in code
--Images with common part could be constructed from overlapping assets over a shared main image (ex. rig). For sake of prototype this totally works, but of course adds a bit of legwork if later redesigning the art (unless the elements are meant to diverge more, instead of sharing common base) - ADK All images changed, as hand drawn style doesn't apply so much
--Block of 5-6 <p id="debugText"> lines should be removed from game.html. If they aren't being used they can be removed, could be re-added if needed, or in any case now that it's in the repo could be easily revived if reference is needed. Likewise there's a few commented out lines 24-27 in Main.js, which I suspect are carryover from JL Evans intro sequence on the Alien Caverns game, which could be easily recreated if needed. Those should be removed outright. ADK- Lines removed
--Communicated alarm state on shortage of resources like oxygen is a great idea, but seems to escalate from being fine at 2 to emergency at 1. Could do something for the midrange of nearing problematic like recolor the overhead label to yellow or orange as it gets within a few clicks of trouble. ADK- Agree as its a prototype it hasn't been balanced yet.
--The Oxygen/Fuel/People/Ore values could optionally be tracked and updated as arrays, like contents = {10,5,3,0} along with pre-defined constants for CONTENTS_OXYGEN=0, CONTENTS_FUEL=1, CONTENTS_PEOPLE=2, CONTENTS_ORE=3, enabling syntax such as contents[CONTENTS_FUEL]. The drain and production rates over time, or game over and goal values, or player storage could then also be depicted as an array, even their string labels stored as a pre-defined array like {"o2","Fuel","Personnel", "Ore"} to be printed via a for-loop, etc. At only several values though it's pretty manageable as separate values, so just because it could be refactored I don't know that it'd be worth doing unless you anticipate adding more such values.
--The above technique could further simplify creating the base text output code into a function which loops over each base state and prints out each relevant value at evenly spaced intervals. The part where it would help most I think is in being able to more easily refactor the switch statement in Ship.js so that each base's relevant pieces could be handled as a loop over the kinds relevant/defined for it (-1 or undefined/null could be stored as a manually verifiable marker for "does not exist on this station").
--Regarding the base UI I noticed a //// 4 slash comment at the end of GraphicsCommon suggesting that would be a place for base UI text output to be coded. I think the name and nature of the GraphicsCommon file is that it should be functions which you would likely reuse and drop-in as-is into another game - this being very primitive and generic functionality like circles, boxes, text and rotated image display. In contrast, base UI is very specific to this game, and so I would suggest such a function instead living in either base.js (the part unique to each base) and/or main.js (as the place calling that function for each base).
ADK- Comment removed, place holder put in Base.js
--The base text readout is currently showing as "crusty" from anti-alias stacking since the for-loop from line 33 is hitting the base text lines like colorText("Part :"+Math.floor(baseState[0].partLevel), 145,510,'white') multiple times every frame. Moving the closing brace from 110 to up above the colorText block will result in clearer text above the bases. ADK - Done, yes I can see the difference
--There's occasional places (entirely possible leftover from previous project, as with my other notes!) like in base.js where there's 4 lines of whitespace skipped from 77-80 or 5 spaces 105-109. I'd generally limit the amount of white space lines skipped to 0-2, and only using 2 for really rare cases of trying to clearly set aside a block of code (likely marked with a comment at its start and end, although by that point it'd often be a candidate to be pulled into its own separate labelled function). There's likewise 3 skipped lines at the top of Main.js for 5-7, or skipping 2 lines at the top of imageLoadingDoneSoStartGame on lines 19-20, Ship.js lines 712-715, etc. Even if these odd spacings were inherited from the previous codebase I think it would be a few minutes well-spent to comb through the files one time and trim those down as a single check-in. Inconsistency in white space line skips makes code much harder for someone else to parse quickly, it makes less clear which code is in which functions or conditional blocks, and the spacing implies assumed meaning but in a somewhat vague way. No need to cram everything back-to-back without breathing room, however line skipping should really be limited and purposeful to show clear grouping.
ADK-All code gone through and excess spaces removed
--In Main.js there's a start function defined within another function, in this area:

function imageLoadingDoneSoStartGame() {
    setupInput();
    loadLevel(levelOne, levelOneBaseState);

    var framesPerSecond = 30;
    setInterval(updateAll, 1000 / framesPerSecond);

    function startLevel() { // need to go back to this
        var framesPerSecond = 30;
        setInterval(updateAll, 1000 / framesPerSecond);
    }
}

While the above arrangement is technically allowable/valid in JavaScript, this type of scoping often confuses other programmers without a JS background since it results in scope weirdness in a way that most other programming languages don't allow. Having more than one thing call setInterval on the same function also tends to lead to bugs of the game happening at twice the rate it's intended to, from an earlier one not getting stopped. I'm guessing that's a carryover from the old opening code (as well as all of start.js), though, and both areas could likely be removed entirely without harm :)
--Re: the ship.js like "//// This feels really clunky any way to loop through?" about adjacency, whether it can be done with a loop depends partly on the symmetry of the collision handling. So, for example, in an overhead view of a round ball banging around, since every point of collision is handled the same, we could do it easily with a circular point loop (this was how Windy Balloon's wall collision code was handled). However for a side-view platformer the consequences of a top collision tend to be different than the effects of a side or bottom collision. For this reason even though it can be a bit clunky it often becomes a matter of how we can better organize the code or label in it for clarity, but is less likely to solved by a loop. Another approach which can be used, and is for example what Mage Hook is doing, is if collision handling is refactored into a "collider" class which hides some of this nastiness from the player-specific code. That is useful for Mage Hook since it has enemies and exploding pinata keys that also need to bounce off walls, but if the player craft is the only moving object in this game is might not be as practical a refactor here. ADK - OK makes sense, just wanted to check I wasn't missing an obvious way to make it easier to parse/work with, as player is only moving collider will leave as is.
--As noted earlier in a point about array storage of resource kinds, one piece which could be refactored in the Ship.js code is a function could reduce reptition or liklihood of errors in the way that adjacent tiles are added to or subtracted from. ADK - Is this referring to secion around lines 197-212?